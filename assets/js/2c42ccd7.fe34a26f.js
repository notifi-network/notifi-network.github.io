"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1009],{4405:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var i=t(4848),o=t(8453);const r={},s="Integrating the Notifi Frontend Client",a={id:"alert-subscribe/frontend-client/index",title:"Integrating the Notifi Frontend Client",description:"@notifi/notifi-frontend-client",source:"@site/docs/alert-subscribe/frontend-client/index.md",sourceDirName:"alert-subscribe/frontend-client",slug:"/alert-subscribe/frontend-client/",permalink:"/docs/next/alert-subscribe/frontend-client/",draft:!1,unlisted:!1,editUrl:"https://github.com/notifi-network/notifi-network.github.io/blob/main/docs/alert-subscribe/frontend-client/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Easy Subscribe",permalink:"/docs/next/alert-subscribe/easy-subscribe/"},next:{title:"GraphQL API",permalink:"/docs/next/alert-subscribe/graphql-api/"}},l={},c=[{value:"Installation",id:"installation",level:2},{value:"\ud83e\ude9d Hook up the SDK and initialize the Client",id:"-hook-up-the-sdk-and-initialize-the-client",level:2},{value:"Signature Authorization",id:"signature-authorization",level:2},{value:"Create the Alert",id:"create-the-alert",level:2},{value:"Updating the Alert",id:"updating-the-alert",level:2},{value:"Deleting the Alert",id:"deleting-the-alert",level:2},{value:"\ud83d\udd14 Get Notification History",id:"-get-notification-history",level:2},{value:"\ud83d\udcdd Check out more example",id:"-check-out-more-example",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"integrating-the-notifi-frontend-client",children:"Integrating the Notifi Frontend Client"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"@notifi/notifi-frontend-client"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/notifi-network/notifi-sdk-ts/tree/main/packages/notifi-frontend-client",children:"https://github.com/notifi-network/notifi-sdk-ts/tree/main/packages/notifi-frontend-client"})}),"\n",(0,i.jsxs)(n.admonition,{type:"warning",children:[(0,i.jsx)(n.p,{children:"This guide is out of date!"}),(0,i.jsxs)(n.p,{children:["This guide covers the Notifi Frontend Client, a toolset that allows integrating Notifi tooling\ninto a custom React UX. If you want to integrate Notifi using a self-contained widget\ninstead, view ",(0,i.jsx)(n.a,{href:"/docs/next/getting-started",children:"our guide on how to use the Notifi React Card"}),"."]})]}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"npm i @notifi-network/notifi-frontend-client\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-hook-up-the-sdk-and-initialize-the-client",children:"\ud83e\ude9d Hook up the SDK and initialize the Client"}),"\n",(0,i.jsx)(n.p,{children:"Load the Notifi Frontend Client SDK into your component."}),"\n",(0,i.jsx)(n.p,{children:"Instantiate and configure the Notifi Client for your dApp and environment. If your user has not connected their wallet, they will need to do so in order to instantiate the client."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const accountAddress = '<The-wallet-public-account-address>';\nconst walletPublicKey = \"<The wallet's public key>\";\nconst tenantId = '<Tenant ID received through the Notifi Config Tool>';\nconst blockchainEnv = 'Production';\n\nconst client = newFrontendClient({\n  account: {\n    address: accountAddress, // string\n    publicKey: walletPublicKey, // string\n  },\n  tenantId,\n  env: blockchainEnv,\n  // replace with your blockchain\n  walletBlockchain: 'APTOS',\n});\n\nconst newUserState = await client.initialize();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"signature-authorization",children:"Signature Authorization"}),"\n",(0,i.jsx)(n.p,{children:"For a user to opt-in for notifications, they will need to provide their signature. This signature will then be used to authorize the user's connected wallet address with Notifi and create the account with Notifi."}),"\n",(0,i.jsxs)(n.p,{children:["Using the wallet adapter of your choice, prompt the user to sign and use the signed message in the ",(0,i.jsx)(n.code,{children:"logIn()"})," hook."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// replace AptosSignMessageFunction with your blockchain SignMessageFunction\nconst signMessage: AptosSignMessageFunction = async (message, nonce) => {\n  if (!wallet) {\n    // the wallet object will be differ based on the wallet adapter you use\n    throw new Error('Wallet not connected');\n  }\n\n  // You will need to use the 'signMessage' method of your wallet adapter to sign the message.\n  const signature = await wallet.signMessage({\n    message,\n  });\n\n  return signature; // string (if the signature is not string format, you will need to convert it to string)\n};\n\nconst logIn = async () => {\n  const userState: UserState = client.userState;\n  if (userState.status === 'authenticated') {\n    return 'User is already logged in';\n  }\n\n  const loginResult = await client.logIn({\n    // replace with your blockchain\n    walletBlockchain: 'APTOS',\n    signMessage,\n  } as SignMessageParams);\n  // client should be authenticated now\n  console.log('loginResult', loginResult);\n  return loginResult;\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"create-the-alert",children:"Create the Alert"}),"\n",(0,i.jsxs)(n.p,{children:["Once your user enters their contact information and options for their first alert, use the ",(0,i.jsx)(n.code,{children:"ensureTargetGroup()"})," to create a ",(0,i.jsx)(n.a,{href:"../integration-overview/alerts-in-depth#target",children:"target group"})," of their contact information and a ",(0,i.jsx)(n.a,{href:"../integration-overview/alerts-in-depth#source",children:"source group"})," of their desired alert options."]}),"\n",(0,i.jsxs)(n.p,{children:["In order to create a target group, ",(0,i.jsx)(n.code,{children:"ensureTargetGroup()"})," must pass in least one email address, phone number, Telegram Id, or Webhook URL. Dapp admins can update pass in a Webhook URL to receive all of the notifications instead of a user email address, phone number, or Telegram Id."]}),"\n",(0,i.jsxs)(n.p,{children:["In order to create a source group, ",(0,i.jsx)(n.code,{children:"ensureSourceGroup()"})," must pass in metadata of the alert options returned in the ",(0,i.jsx)(n.a,{href:"https://github.com/notifi-network/notifi-sdk-ts/tree/main/packages/notifi-react-hooks",children:"Rendering Alert Options"})," section."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const targetGroup = client.ensureTargetGroup({\n  name: 'Default',\n  emailAddress: 'user-email',\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then, use the ",(0,i.jsx)(n.code,{children:"ensureAlert()"})," to create the first alert when your user tends to subscribe an alert."]}),"\n",(0,i.jsx)(n.p,{children:"This example shows how to create (user subscribe) a Broadcast message alert."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Given that you have one Broadcast Topic in Notifi Admin Portal.\n\nconst subscribeAlert = () => {\n  const subscriptionCardConfig = await client.fetchSubscriptionCard();\n\n  const broadcastEventType: EventTypeItem = subscriptionCardConfig.eventTypes[0];\n\n  await client.ensureAlert({\n    eventType: broadcastEventType,\n    inputs: {},\n  });\n}\n\n"})}),"\n",(0,i.jsx)(n.h2,{id:"updating-the-alert",children:"Updating the Alert"}),"\n",(0,i.jsxs)(n.p,{children:["If a user wants to update their alert by changing the email address notifications are sent to, or to add a phone number for SMS notifications, you can repeat the process above by calling ",(0,i.jsx)(n.code,{children:"ensureTargetGroup()"})," and ",(0,i.jsx)(n.code,{children:"ensureAlert()"})," again."]}),"\n",(0,i.jsx)(n.h2,{id:"deleting-the-alert",children:"Deleting the Alert"}),"\n",(0,i.jsxs)(n.p,{children:["To delete an alert, use ",(0,i.jsx)(n.code,{children:"deleteAlert()"}),", which simply takes the ",(0,i.jsx)(n.code,{children:"id"})," of the alert to be deleted. Here is what that looks like in our use case where the user only has one alert in their account:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const handleDeleteAlert = async () => {\n  try {\n    const alerts = await getAlert();\n    const response = await deleteAlert({\n      alertId: alerts?.[0]?.id,\n    });\n    return response;\n  } catch (e) {\n    if (e instanceof GqlError) {\n      // handle the Notifi GqlError\n    }\n  }\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-get-notification-history",children:"\ud83d\udd14 Get Notification History"}),"\n",(0,i.jsx)(n.p,{children:"To get notification history, use the getNotificationHistory()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const getNotificationHistory = async (first?: number, after?: string) => {\n  // Fetch `first` items after the `after` cursor (leave undefined for first page)\n  const { nodes, pageInfo } = await client.getNotificationHistory({\n    first,\n    after,\n  });\n\n  nodes.forEach((item) => {\n    if (item.detail?.__typename === 'BroadcastMessageEventDetails') {\n      console.log(\n        'I have a broadcast message',\n        item.detail?.subject,\n        item.detail?.message,\n      );\n    }\n  });\n\n  console.log('pageInfo', pageInfo.hasNextPage, pageInfo.endCursor);\n\n  return {\n    nodes,\n    pageInfo,\n  };\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-check-out-more-example",children:"\ud83d\udcdd Check out more example"}),"\n",(0,i.jsxs)(n.p,{children:["For more example in different blockchain, please visit ",(0,i.jsx)(n.a,{href:"https://github.com/notifi-network/notifi-sdk-ts/blob/main/packages/notifi-react-example/src/FrontendClient/",children:"notifi-react-example"})]}),"\n",(0,i.jsx)(n.p,{children:"You can also clone the example and run it locally."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);