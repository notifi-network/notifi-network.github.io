"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5907],{5018:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var s=n(4848),i=n(8453);const r={sidebar_position:4},a="Subscription Parameters",o={id:"create-topics/subscription-parameters",title:"Subscription Parameters",description:"This document concerns a work-in-progress feature that is not yet generally available.",source:"@site/docs/create-topics/subscription-parameters.md",sourceDirName:"create-topics",slug:"/create-topics/subscription-parameters",permalink:"/docs/next/create-topics/subscription-parameters",draft:!1,unlisted:!1,editUrl:"https://github.com/notifi-network/notifi-network.github.io/blob/main/docs/create-topics/subscription-parameters.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Notifi monitored alerts",permalink:"/docs/next/create-topics/notifi-monitored"},next:{title:"Create Smart Links",permalink:"/docs/next/create-smart-links/"}},c={},l=[{value:"Setting Up A Topic To Use Subscription Parameters",id:"setting-up-a-topic-to-use-subscription-parameters",level:2},{value:"Getting Subscription Parameters From Users",id:"getting-subscription-parameters-from-users",level:2},{value:"Sending Alerts with Subscription Parameters",id:"sending-alerts-with-subscription-parameters",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"subscription-parameters",children:"Subscription Parameters"}),"\n",(0,s.jsx)(t.admonition,{type:"warning",children:(0,s.jsx)(t.p,{children:"This document concerns a work-in-progress feature that is not yet generally available."})}),"\n",(0,s.jsx)(t.p,{children:"This page documents how to use the \"User Selects From List\" feature when creating topics in Notifi Admin.\nThis feature can be used to create further filters based on users' areas of interest without having to create a\nseparate topic for each. This is especially useful when these areas of interest are too flexible for Notifi's topic\nUI, such as price pairs that may appear or disappear from an exchange, or alerts on specific DAO proposals that come\nand go."}),"\n",(0,s.jsx)(t.h2,{id:"setting-up-a-topic-to-use-subscription-parameters",children:"Setting Up A Topic To Use Subscription Parameters"}),"\n",(0,s.jsxs)(t.p,{children:["When creating a topic, under ",(0,s.jsx)(t.strong,{children:"What information do you need from the subscribing user?"}),", select\n",(0,s.jsx)(t.strong,{children:"User Selects From List"}),". In the text box labeled ",(0,s.jsx)(t.strong,{children:"Variable Name for Input List"}),", enter a simple,\n",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Camel_case",children:"camelCase"})," name that describes the list you'll be building.\n(The actual list will come from your UI on the frontend, see below). Set up the rest of the topic as normal,\nand attach it to a card configuration."]}),"\n",(0,s.jsx)(t.h2,{id:"getting-subscription-parameters-from-users",children:"Getting Subscription Parameters From Users"}),"\n",(0,s.jsxs)(t.p,{children:["Once you have set up your topic and card, you can then set it up in your UI. The custom list feature is available in\nthe new ",(0,s.jsx)(t.a,{href:"https://github.com/notifi-network/notifi-sdk-ts/tree/main/packages/notifi-react",children:(0,s.jsx)(t.code,{children:"notifi-react"})})," package,\nwhich supersedes the ",(0,s.jsx)(t.a,{href:"https://github.com/notifi-network/notifi-sdk-ts/tree/main/packages/notifi-react-card",children:(0,s.jsx)(t.code,{children:"notifi-react-card"})})," package."]}),"\n",(0,s.jsxs)(t.p,{children:["The UI is created through the ",(0,s.jsx)(t.code,{children:"NotifiContextProvider"})," element, and the list can be supplied through the ",(0,s.jsx)(t.code,{children:"inputs"}),"\nfield on that element. Each item contains a ",(0,s.jsx)(t.code,{children:"label"}),", which is shown to the user, and a ",(0,s.jsx)(t.code,{children:"value"}),", which is supplied to\nyour code:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"<NotifiContextProvider\n  tenantId={tenantId}\n  walletBlockchain={walletBlockchain}\n  walletPublicKey={walletPublicKey}\n  inputs={{\n    variableNameChosenDuringTopicSetup: [\n      { label: 'Display Label 1', value: 'FirstValue' },\n      { label: 'Display Label 2', value: 'SecondValue' }\n      // ... and so on\n    ],\n    walletAddress: [{ label: '', value: walletPublicKey }],\n  }}\n  signMessage={signMessage}\n  cardId={cardId}\n>\n  {children}\n</NotifiContextProvider>\n"})}),"\n",(0,s.jsxs)(t.p,{children:["For instance, if you are creating a topic where you want\nto allow users to specify price pairs, and set the variable\nname as ",(0,s.jsx)(t.code,{children:"pricePairs"}),", you might do something like this:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"<NotifiContextProvider\n  tenantId={YOUR_TENANT_ID}\n  walletBlockchain={walletBlockchain}\n  walletPublicKey={walletPublicKey}\n  inputs={{\n    pricePairs: [\n      { label: 'USD/BTC', value: 'USD-BTC pair' },\n      { label: 'USD/ETH', value: 'USD-ETH pair' },\n      { label: 'BTC/ETH', value: 'BTC-ETH pair' }\n      // ... and so on\n    ],\n    walletAddress: [{ label: '', value: walletPublicKey }],\n  }}\n  signMessage={signMessage}\n  cardId={YOUR_CARD_ID}\n>\n  {children}\n</NotifiContextProvider>\n"})}),"\n",(0,s.jsx)(t.h2,{id:"sending-alerts-with-subscription-parameters",children:"Sending Alerts with Subscription Parameters"}),"\n",(0,s.jsxs)(t.p,{children:["Finally, when creating your ",(0,s.jsx)(t.a,{href:"/docs/next/notifi-hosted-development/",children:"parser code"}),", you can supply\nyour alerts with one of these selected values in order to filter messages. This is done through the ",(0,s.jsx)(t.code,{children:"comparisonValue"}),"\non the alert:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"events.push({\n  eventTypeId: EVENT_TYPE_ID,\n  comparisonValue: `USD-ETH pair`, // <-- here, specifying the USD/ETH pair from earlier\n  // ... other fields\n})\n"})}),"\n",(0,s.jsxs)(t.p,{children:["These values (as well as the wallet IDs) can also be viewed in the ",(0,s.jsx)(t.code,{children:"subscriptionValue"})," field of the input\n",(0,s.jsx)(t.code,{children:"subscriptions"}),". This can be used to obtain a list of user selections in order to know what data\nyou should focus on:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'const parse: Evm.Parser["parse"] = async (\n  args,\n  rpc,\n  storage,\n  logger,\n  subscriptions\n) => {\n  // ...\n\n  const selections = new Set(\n    await subscriptions\n      .get(YOUR_EVENT_TYPE_ID)\n      .then(({ subscriptions }) => {\n        return subscriptions.map((x) => x.subscriptionValue);\n      })\n  );\n'})}),"\n",(0,s.jsxs)(t.p,{children:["As a side note, if you do this same procedure on a topic where this setting is set to ",(0,s.jsx)(t.strong,{children:"Wallet Address"}),", you will\nget a list of subscribed or watched wallets instead."]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(6540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);